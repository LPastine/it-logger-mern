{"ast":null,"code":"import axios from 'axios';\nimport { ADD_LOG, GET_LOGS, UPDATE_LOG, DELETE_LOG, SET_LOADING, LOGS_ERROR, SET_CURRENT, CLEAR_CURRENT // SEARCH_LOGS, \n} from './types'; // Add new log to server with axios\n\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/logs', log, config);\n    dispatch({\n      type: ADD_LOG,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Get logs from server\n\nexport const getLogs = log => async dispatch => {\n  try {\n    setLoading();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.get('/api/logs', log, config);\n    dispatch({\n      type: GET_LOGS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Delete log to server with axios\n\nexport const deleteLog = _id => async dispatch => {\n  try {\n    setLoading();\n    await axios.delete(`/api/logs/${_id}`);\n    dispatch({\n      type: DELETE_LOG,\n      payload: _id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set current log\n\nexport const setCurrent = log => {\n  return {\n    type: SET_CURRENT,\n    payload: log\n  };\n}; // Clear current log\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/LP1/Dev/it_logger_fs/client/src/actions/logActions.js"],"names":["axios","ADD_LOG","GET_LOGS","UPDATE_LOG","DELETE_LOG","SET_LOADING","LOGS_ERROR","SET_CURRENT","CLEAR_CURRENT","addLog","log","dispatch","setLoading","config","headers","res","post","type","payload","data","err","response","statusText","getLogs","get","deleteLog","_id","delete","setCurrent","clearCurrent"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,OADJ,EAEIC,QAFJ,EAGIC,UAHJ,EAIIC,UAJJ,EAKIC,WALJ,EAMIC,UANJ,EAOIC,WAPJ,EAQIC,aARJ,CASI;AATJ,OAUO,SAVP,C,CAYA;;AACA,OAAO,MAAMC,MAAM,GAAIC,GAAD,IAAS,MAAMC,QAAN,IAAkB;AAC7C,MAAI;AACAC,IAAAA,UAAU;AAEV,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAwBN,GAAxB,EAA6BG,MAA7B,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEhB,OADD;AAELiB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAfD,CAeE,OAAOC,GAAP,EAAY;AACVT,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX,UADD;AAELY,MAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAtBM,C,CAwBP;;AACA,OAAO,MAAMC,OAAO,GAAIb,GAAD,IAAS,MAAMC,QAAN,IAAkB;AAC9C,MAAI;AACAC,IAAAA,UAAU;AAEV,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAMC,GAAG,GAAG,MAAMf,KAAK,CAACwB,GAAN,CAAU,WAAV,EAAuBd,GAAvB,EAA4BG,MAA5B,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEf,QADD;AAELgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAfD,CAeE,OAAOC,GAAP,EAAY;AACVT,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX,UADD;AAELY,MAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAtBM,C,CAwBP;;AACA,OAAO,MAAMG,SAAS,GAAIC,GAAD,IAAS,MAAMf,QAAN,IAAkB;AAChD,MAAI;AACAC,IAAAA,UAAU;AAEV,UAAMZ,KAAK,CAAC2B,MAAN,CAAc,aAAYD,GAAI,EAA9B,CAAN;AAEAf,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEb,UADD;AAELc,MAAAA,OAAO,EAAEQ;AAFJ,KAAD,CAAR;AAIH,GATD,CASE,OAAON,GAAP,EAAY;AACVT,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX,UADD;AAELY,MAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMM,UAAU,GAAGlB,GAAG,IAAI;AAC7B,SAAO;AACHO,IAAAA,IAAI,EAAEV,WADH;AAEHW,IAAAA,OAAO,EAAER;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMmB,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHZ,IAAAA,IAAI,EAAET;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMI,UAAU,GAAG,MAAM;AAC5B,SAAO;AACHK,IAAAA,IAAI,EAAEZ;AADH,GAAP;AAGH,CAJM","sourcesContent":["import axios from 'axios';\n\nimport { \n    ADD_LOG, \n    GET_LOGS, \n    UPDATE_LOG,\n    DELETE_LOG,\n    SET_LOADING, \n    LOGS_ERROR, \n    SET_CURRENT, \n    CLEAR_CURRENT \n    // SEARCH_LOGS, \n} from './types';\n\n// Add new log to server with axios\nexport const addLog = (log) => async dispatch => {\n    try {\n        setLoading();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const res = await axios.post('/api/logs', log, config);\n\n        dispatch({\n            type: ADD_LOG,\n            payload: res.data\n        })\n    } catch (err) {\n        dispatch({\n            type: LOGS_ERROR,\n            payload: err.response.statusText\n        })\n    }\n}\n\n// Get logs from server\nexport const getLogs = (log) => async dispatch => {\n    try {\n        setLoading();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const res = await axios.get('/api/logs', log, config);\n\n        dispatch({\n            type: GET_LOGS,\n            payload: res.data\n        })\n    } catch (err) {\n        dispatch({\n            type: LOGS_ERROR,\n            payload: err.response.statusText\n        })\n    }\n};\n\n// Delete log to server with axios\nexport const deleteLog = (_id) => async dispatch => {\n    try {\n        setLoading();\n\n        await axios.delete(`/api/logs/${_id}`);\n\n        dispatch({\n            type: DELETE_LOG,\n            payload: _id\n        })\n    } catch (err) {\n        dispatch({\n            type: LOGS_ERROR,\n            payload: err.response.statusText\n        })\n    }\n}\n\n// Set current log\nexport const setCurrent = log => {\n    return {\n        type: SET_CURRENT,\n        payload: log\n    }\n}\n\n// Clear current log\nexport const clearCurrent = () => {\n    return {\n        type: CLEAR_CURRENT,\n    }\n}\n\n// Set loading to true\nexport const setLoading = () => {\n    return {\n        type: SET_LOADING\n    };\n};"]},"metadata":{},"sourceType":"module"}